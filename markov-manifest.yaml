apiVersion: v1
kind: Namespace
metadata:
  name: markov
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: markov-server
  namespace: markov
spec:
  replicas: 1
  selector:
    matchLabels:
      app: markov-server
  template:
    metadata:
      labels:
        app: markov-server
    spec:
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      containers:
      - name: markov
        image: docker.lan:5000/markov-server
        imagePullPolicy: Always
        env:
        - name: CASSANDRA_HOST
          value: cassandra.cassandra
        ports:
        - name: http
          containerPort: 5000
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
  namespace: markov
spec:
  template:
    spec:
      containers:
      - name: db-init
        image: nuvo/docker-cqlsh
        env:
        - name: CQLSH_HOST
          value: cassandra.cassandra
        volumeMounts:
        - name: init-scripts
          mountPath: /scripts
      restartPolicy: Never
      volumes:
      - name: init-scripts
        configMap:
          name: markov-init
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: markov-init
  namespace: markov
data:
  markov-init.cql: |
    CREATE KEYSPACE IF NOT EXISTS markov WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
    USE MARKOV;
    CREATE TABLE IF NOT EXISTS markov_names (markov_name TEXT, PRIMARY KEY (markov_name));
    CREATE TABLE IF NOT EXISTS markov_data (markov_name TEXT, seed BLOB, value BLOB, count COUNTER, PRIMARY KEY (markov_name, seed, value));
---
kind: Service
apiVersion: v1
metadata:
  name: markov-server
  namespace: markov
spec:
  type: ClusterIP
  selector:
    app: markov-server
  clusterIP: None
  ports:
  - port: 80
    targetPort: http
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: markov
  namespace: markov
spec:
  rules:
  - host: markov.lan
    http:
      paths:
      - backend:
          serviceName: markov-server
          servicePort: 80
